---
// Feature List Section
// ------------
// Description: A list of features with icons and descriptions in a 4 column layout.

// Components
// - Layout

import Section from '../../ui/Section.astro'
import Row from '../../ui/Row.astro'
import Col from '../../ui/Col.astro'
// - UI

// Data
import tabs from '../../../data/json-files/schoolsData.json'

import RawCard from '../../ui/cards/partials/Card.astro'

import RappresentantiScuola from './SchedaRappresentanti.astro'
---

<Section id="rappresentanti" classes="bg-neutral-50 dark:bg-neutral-900">
	<Section>
		
	<Row>
		<Col span="12" align="center" classes="mb-12 max-w-4xl mx-auto">
			<h2 class="text-pretty">I Rappresentanti</h2>
			<p class="pb-0 text-lg">
				Ogni scuola facente parte dell'associazione ha due rappresentanti con mandato di 1
				anno.
			</p>
		</Col>
	</Row>

	<Row>
		<Col span="12" align="center" classes="w-full p-0 m-0">
			<div x-data="{ panel: 'venezia', label: 'Venezia' }">
				<div
					x-data="{
						open: false,
						toggle() {
							if (this.open) {
								return this.close()
							}
			
							this.$refs.button.focus()
			
							this.open = true
						},
						close(focusAfter) {
							if (! this.open) return
			
							this.open = false
			
							focusAfter && focusAfter.focus()
						}
					}"
					x-on:keydown.escape.prevent.stop="close($refs.button)"
					x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
					class="relative inline-block text-left"
				>
					<div class="flex flex-row justify-center gap-6">
						<h3>Scuola:</h3>
						<button
							x-ref="button"
							type="button"
							x-on:click="toggle()"
							class="shadow-xs inline-flex h-full w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
							id="menu-button"
						>
							<span id="school-dropdown-label" x-text="label"></span>
							<svg
								class="-mr-1 size-5 text-gray-400"
								viewBox="0 0 20 20"
								fill="currentColor"
								data-slot="icon"
							>
								<path
									fill-rule="evenodd"
									d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z"
									clip-rule="evenodd"></path>
							</svg>
						</button>
					</div>

					<div
						class="focus:outline-hidden absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black/5"
						role="menu"
						x-show="open"
						x-ref="panel"
						x-transition.origin.top.left
						x-on:click.outside="close($refs.button)"
						aria-labelledby="menu-button"
						tabindex="-1"
					>
						<div class="py-1" role="none">
							<!-- Active: "bg-gray-100 text-gray-900 outline-hidden", Not Active: "text-gray-700" -->
							{
								tabs.map((tab) => (
									<a
										class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
										role="menuitem"
										x-on:click={`panel = '${tab.id}'; label = '${tab.label}'; close($refs.button)`}
										data-value={tab.id}
										data-label={tab.label}
										tabindex="-1"
										id={`menu-item-${tab.id}`}
									>
										<span class="font-semibold">{tab.label}</span>
									</a>
								))
							}
						</div>
					</div>
				</div>

				<Section classes="lg:px-16 bg-white shadow-primary-500/30 dark:bg-neutral-950">
					{
						tabs.map((tab, i) => (
							<div x-show={`panel === '${tab.id}'`}>
								<RappresentantiScuola
									tabId={tab.id}
									classes=""
									scuola={tab.scuola}
									luogo={tab.luogo}
									data={tab.data}
								/>
							</div>
						))
					}
				</Section>
			</div>
		</Col>
	</Row>
</Section>
<!-- <script>
	function initDropdownMenu() {
		const button = document.getElementById('menu-button')
		const menu = button?.parentElement?.nextElementSibling
		const panels = document.querySelectorAll('.dropdown-panel')
		const labelElement = document.getElementById('school-dropdown-label')

		if (!button || !menu) return

		// Initial menu state
		menu.classList.add(
			'transition',
			'ease-in',
			'duration-75',
			'transform',
			'opacity-0',
			'scale-95',
			'hidden'
		)

		function hideMenu() {
			menu.classList.remove('opacity-100', 'scale-100', 'ease-out', 'duration-100')
			menu.classList.add('opacity-0', 'scale-95', 'ease-in', 'duration-75')
			setTimeout(
				() => menu.classList.contains('opacity-0') && menu.classList.add('hidden'),
				100
			)
		}

		function showMenu() {
			menu.classList.remove('hidden')
			// Force reflow
			void (menu as HTMLElement).offsetHeight
			menu.classList.remove('opacity-0', 'scale-95', 'ease-in', 'duration-75')
			menu.classList.add('opacity-100', 'scale-100', 'ease-out', 'duration-100')
		}

		button.addEventListener('click', (e) => {
			e.stopPropagation()
			menu.classList.contains('hidden') ? showMenu() : hideMenu()
		})

		document.addEventListener('click', (e) => {
			const target = e.target as Node;
			if (!menu.contains(target) && target !== button) hideMenu()
		})

		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape') {
				hideMenu()
				button.focus()
			}
		})

		menu.querySelectorAll('a[data-value][data-label]').forEach((item) => {
			item.addEventListener('click', (e) => {
				e.preventDefault()
				const value = item.getAttribute('data-value')
				const label = item.getAttribute('data-label')
				if (value && label) {
					if (labelElement) labelElement.textContent = label
					hideMenu()
					panels.forEach((panel) =>
						panel.classList.toggle('hidden', panel.id !== `dropdown-panel-${value}`)
					)
				}
			})
		})
	}

	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initDropdownMenu)
	} else {
		initDropdownMenu()
	}
</script> -->

<style>
	.dropdown {
		@apply mx-auto block w-full max-w-xs rounded border-gray-300 p-2 shadow dark:text-gray-100;
	}
</style>

<!--		@apply inline-flex cursor-pointer items-center justify-center gap-2 whitespace-nowrap rounded font-bold tracking-wide transition duration-300 focus-visible:outline-none disabled:cursor-not-allowed disabled:shadow-none;
 -->
